// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: gdpr.proto

package registered_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GDPRClient is the client API for GDPR service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GDPRClient interface {
	// *
	// Data Generation.
	// The generated data will be uploaded into GDPR Service storage.
	DataGeneration(ctx context.Context, in *DataGenerationRequest, opts ...grpc.CallOption) (*DataGenerationResponse, error)
	// *
	// Data Deletion.
	DataDeletion(ctx context.Context, in *DataDeletionRequest, opts ...grpc.CallOption) (*DataDeletionResponse, error)
	// *
	// Data Restriction.
	//
	// Used to inform registered service when specific IAM account was disabled,
	// So that the service could ensure the personal data associated with disabled account ceased to be available to other users.
	DataRestriction(ctx context.Context, in *DataRestrictionRequest, opts ...grpc.CallOption) (*DataRestrictionResponse, error)
	// *
	// Platform Account Closure.
	// Used to inform the registered services to handle the 3rd party account closure.
	PlatformAccountClosure(ctx context.Context, in *PlatformAccountClosureRequest, opts ...grpc.CallOption) (*PlatformAccountClosureResponse, error)
}

type gDPRClient struct {
	cc grpc.ClientConnInterface
}

func NewGDPRClient(cc grpc.ClientConnInterface) GDPRClient {
	return &gDPRClient{cc}
}

func (c *gDPRClient) DataGeneration(ctx context.Context, in *DataGenerationRequest, opts ...grpc.CallOption) (*DataGenerationResponse, error) {
	out := new(DataGenerationResponse)
	err := c.cc.Invoke(ctx, "/accelbyte.gdpr.registered.v1.GDPR/DataGeneration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPRClient) DataDeletion(ctx context.Context, in *DataDeletionRequest, opts ...grpc.CallOption) (*DataDeletionResponse, error) {
	out := new(DataDeletionResponse)
	err := c.cc.Invoke(ctx, "/accelbyte.gdpr.registered.v1.GDPR/DataDeletion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPRClient) DataRestriction(ctx context.Context, in *DataRestrictionRequest, opts ...grpc.CallOption) (*DataRestrictionResponse, error) {
	out := new(DataRestrictionResponse)
	err := c.cc.Invoke(ctx, "/accelbyte.gdpr.registered.v1.GDPR/DataRestriction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gDPRClient) PlatformAccountClosure(ctx context.Context, in *PlatformAccountClosureRequest, opts ...grpc.CallOption) (*PlatformAccountClosureResponse, error) {
	out := new(PlatformAccountClosureResponse)
	err := c.cc.Invoke(ctx, "/accelbyte.gdpr.registered.v1.GDPR/PlatformAccountClosure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GDPRServer is the server API for GDPR service.
// All implementations must embed UnimplementedGDPRServer
// for forward compatibility
type GDPRServer interface {
	// *
	// Data Generation.
	// The generated data will be uploaded into GDPR Service storage.
	DataGeneration(context.Context, *DataGenerationRequest) (*DataGenerationResponse, error)
	// *
	// Data Deletion.
	DataDeletion(context.Context, *DataDeletionRequest) (*DataDeletionResponse, error)
	// *
	// Data Restriction.
	//
	// Used to inform registered service when specific IAM account was disabled,
	// So that the service could ensure the personal data associated with disabled account ceased to be available to other users.
	DataRestriction(context.Context, *DataRestrictionRequest) (*DataRestrictionResponse, error)
	// *
	// Platform Account Closure.
	// Used to inform the registered services to handle the 3rd party account closure.
	PlatformAccountClosure(context.Context, *PlatformAccountClosureRequest) (*PlatformAccountClosureResponse, error)
	mustEmbedUnimplementedGDPRServer()
}

// UnimplementedGDPRServer must be embedded to have forward compatible implementations.
type UnimplementedGDPRServer struct {
}

func (UnimplementedGDPRServer) DataGeneration(context.Context, *DataGenerationRequest) (*DataGenerationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataGeneration not implemented")
}
func (UnimplementedGDPRServer) DataDeletion(context.Context, *DataDeletionRequest) (*DataDeletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataDeletion not implemented")
}
func (UnimplementedGDPRServer) DataRestriction(context.Context, *DataRestrictionRequest) (*DataRestrictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataRestriction not implemented")
}
func (UnimplementedGDPRServer) PlatformAccountClosure(context.Context, *PlatformAccountClosureRequest) (*PlatformAccountClosureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatformAccountClosure not implemented")
}
func (UnimplementedGDPRServer) mustEmbedUnimplementedGDPRServer() {}

// UnsafeGDPRServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GDPRServer will
// result in compilation errors.
type UnsafeGDPRServer interface {
	mustEmbedUnimplementedGDPRServer()
}

func RegisterGDPRServer(s grpc.ServiceRegistrar, srv GDPRServer) {
	s.RegisterService(&GDPR_ServiceDesc, srv)
}

func _GDPR_DataGeneration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataGenerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPRServer).DataGeneration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.gdpr.registered.v1.GDPR/DataGeneration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPRServer).DataGeneration(ctx, req.(*DataGenerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPR_DataDeletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataDeletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPRServer).DataDeletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.gdpr.registered.v1.GDPR/DataDeletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPRServer).DataDeletion(ctx, req.(*DataDeletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPR_DataRestriction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRestrictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPRServer).DataRestriction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.gdpr.registered.v1.GDPR/DataRestriction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPRServer).DataRestriction(ctx, req.(*DataRestrictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GDPR_PlatformAccountClosure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatformAccountClosureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDPRServer).PlatformAccountClosure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.gdpr.registered.v1.GDPR/PlatformAccountClosure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDPRServer).PlatformAccountClosure(ctx, req.(*PlatformAccountClosureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GDPR_ServiceDesc is the grpc.ServiceDesc for GDPR service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GDPR_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.gdpr.registered.v1.GDPR",
	HandlerType: (*GDPRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DataGeneration",
			Handler:    _GDPR_DataGeneration_Handler,
		},
		{
			MethodName: "DataDeletion",
			Handler:    _GDPR_DataDeletion_Handler,
		},
		{
			MethodName: "DataRestriction",
			Handler:    _GDPR_DataRestriction_Handler,
		},
		{
			MethodName: "PlatformAccountClosure",
			Handler:    _GDPR_PlatformAccountClosure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gdpr.proto",
}
